import java.io.{File, FileWriter, PrintWriter}
import java.util.concurrent.atomic.AtomicInteger

case class VcdVariable(name: String, varType: String, size: Int = 1, init: String)

class VCDWriter(fileName: String, topModule: String, variables: Seq[VcdVariable]) {
  val file = new File(fileName)
  val writer = new PrintWriter(new FileWriter(file))

  val signals = collection.mutable.Map[String, String]()
  val changes = collection.mutable.Map[String, String]()
  val lastState = collection.mutable.Map[String, String]()
  
  var nextId = '!'.toInt
  var time = 0

  val timescale = "1ns"

  writer.println("$date\n   Generated by VCDWriter.\n$end")
  writer.println("$version\n   VCDWriter v1.0\n$end")
  writer.println("$comment\n   Simple VCD writer in Scala.\n$end")
  writer.println(s"$$timescale $timescale $$end")
  writer.println(s"$$scope module $topModule $$end")

  for (variable <- variables) {
    writer.println(s"$$var ${variable.varType} ${variable.size} ${nextId.toChar} ${variable.name} $$end")
    signals += (variable.name -> nextId.toChar.toString)
    lastState += (variable.name -> variable.init)
    nextId += 1
  }

  writer.println("$upscope $end")
  writer.println("$enddefinitions $end")
  writer.println("$dumpvars")

  for (variable <- variables) {
    writer.println(s"${variable.init} ${signals(variable.name)}")
    nextId += 1
  }

  writer.println("$end")


  def valueChange(name: String, value: BigInt): Unit = {
    val str = s"b${value.toString(2)}"
    if (str != lastState(name)) {
      lastState += (name -> str)
      changes += (name -> str)
    }
  }

  def tick(): Unit = {
    writer.println("#" + time)
    for ((name, value) <- changes) {
      writer.println(s"$value ${signals(name)}")
    }
    changes.clear()
    time += 1
  }

  def close(): Unit = {
    writer.close()
  }

}

// Usage example:
object VCDExample extends App {
  val vcd = new VCDWriter("test.vcd", "top", Seq(
    VcdVariable("data", "wire", 8, "bxxxxxxxx"),
  )
  )

  for (i <- 0 to 10) {  // Extended the time of the dump
    vcd.valueChange("data", i)
    vcd.tick()
  }
  
  vcd.close()
}
